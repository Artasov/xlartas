# DockerfileNext
# -------- Next.js (Node) production image --------
# Переход на Debian-слой (glibc) вместо Alpine (musl), чтобы sharp корректно подхватывал бинарники

FROM node:20-bookworm-slim AS deps
WORKDIR /app

COPY ./frontend/package.json ./frontend/yarn.lock* ./frontend/package-lock.json* ./

# build-essential и python3 нужны для нативных модулей на случай пересборки
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential python3 ca-certificates \
  && rm -rf /var/lib/apt/lists/* \
  && corepack enable \
  && if [ -f yarn.lock ]; then \
       yarn install --frozen-lockfile; \
     elif [ -f package-lock.json ]; then \
       npm ci --legacy-peer-deps; \
     else \
       npm i --legacy-peer-deps; \
     fi

FROM node:20-bookworm-slim AS builder
WORKDIR /app
ENV NEXT_TELEMETRY_DISABLED=1

COPY ./frontend/ ./
COPY --from=deps /app/node_modules ./node_modules

RUN corepack enable && \
    if [ -f yarn.lock ]; then \
      yarn build; \
    else \
      npm run build; \
    fi

FROM node:20-bookworm-slim AS runner
WORKDIR /app
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

# Копируем собранный проект и node_modules
COPY --from=builder /app ./

EXPOSE 3000

# Запускаем стандартный сервер Next
CMD [ "sh", "-c", "corepack enable >/dev/null 2>&1 || true; if [ -f yarn.lock ]; then yarn start -p 3000; else npm run start -- -p 3000; fi" ]
