# Generated by Django 4.2.4 on 2024-02-22 03:47

import apps.shop.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('Core', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('program', 'program'), ('account', 'account')], default='account', max_length=20)),
                ('name', models.CharField(max_length=50)),
                ('long_name', models.CharField(blank=True, max_length=100)),
                ('version', models.CharField(blank=True, max_length=5)),
                ('img', models.ImageField(blank=True, upload_to='products/%Y/%m/%d')),
                ('discount', models.IntegerField(default=0)),
                ('desc', models.TextField(blank=True)),
                ('desc_short', models.CharField(blank=True, max_length=100, null=True)),
                ('review_ulr', models.CharField(blank=True, max_length=200, null=True)),
                ('available', models.BooleanField(default=True)),
                ('log_changes', models.TextField(blank=True, null=True)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('test_period_days', models.IntegerField(default=3)),
                ('price_week', models.IntegerField(blank=True, null=True)),
                ('price_month', models.IntegerField(blank=True, null=True)),
                ('price_half_year', models.IntegerField(blank=True, null=True)),
                ('price_year', models.IntegerField(blank=True, null=True)),
                ('price_forever', models.IntegerField(blank=True, null=True)),
                ('file', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='Core.file')),
            ],
            options={
                'verbose_name_plural': 'Products',
                'ordering': ['type'],
            },
        ),
        migrations.CreateModel(
            name='PromoGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
            ],
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_test_period_activated', models.BooleanField(default=False, verbose_name='Is tested')),
                ('count_starts', models.IntegerField(default=0, verbose_name='Starts')),
                ('date_expiration', models.DateTimeField(blank=True, default=django.utils.timezone.now)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop.product')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Promo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=50, unique=True)),
                ('type', models.CharField(choices=[('discount', 'discount'), ('balance', 'balance')], max_length=50)),
                ('value', models.IntegerField()),
                ('applys_now', models.IntegerField(default=0)),
                ('applys_max', models.IntegerField(default=60)),
                ('date_expiration', models.DateTimeField(default=apps.shop.models.NowPlus30Days)),
                ('group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='shop.promogroup')),
                ('used_by', models.ManyToManyField(blank=True, related_name='used_promo', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amountRub', models.DecimalField(decimal_places=2, max_digits=8)),
                ('status', models.CharField(choices=[('waiting', 'waiting'), ('done', 'done'), ('paid', 'paid'), ('rejected', 'rejected'), ('expired', 'expired')], default='waiting', max_length=10)),
                ('is_complete', models.BooleanField(default=False)),
                ('desc', models.CharField(blank=True, max_length=250)),
                ('license_type', models.CharField(blank=True, choices=[('week', 'week'), ('month', 'month'), ('half_year', 'half_year'), ('year', 'year'), ('forever', 'forever')], max_length=20, null=True)),
                ('order_system_name', models.CharField(blank=True, max_length=30)),
                ('order_id', models.CharField(blank=True, max_length=30)),
                ('type', models.CharField(choices=[('product', 'product'), ('balance', 'balance'), ('donate', 'donate')], default='product', max_length=10)),
                ('pay_link', models.CharField(blank=True, max_length=150)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('product', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='shop.product')),
                ('promo', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='shop.promo')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['date_created'],
            },
        ),
    ]
